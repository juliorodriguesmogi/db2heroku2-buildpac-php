# !/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# Heroku Revision.
#
# Affixed to all vendored binary output to represent changes to the
# compilation environment without a change to the upstream version,
# e.g. PHP 5.3.27 without, and then subsequently with, libmcrypt.
heroku_rev='-2'

# config
MCRYPT_VERSION="2.5.8"
APACHE_VERSION="2.2.25"
APACHE_PATH="apache"
PHP_VERSION="5.6.27"
PHP_PATH="php-5.6.27"

BIN_DIR=$(dirname $0)

BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

  
# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

MCRYPT_URL="https://heroku-buildpack-php.s3.amazonaws.com/mcrypt-""$MCRYPT_VERSION""$heroku_rev"".tar.gz"
echo "-----> Bundling mcrypt version $MCRYPT_VERSION"
curl --silent --max-time 60 --location "$MCRYPT_URL" | tar xz

#APACHE_URL="http://mirror.nbtelecom.com.br/apache//httpd/httpd-2.4.23.tar.gz"
#echo "-----> Bundling Apache version $APACHE_VERSION"
#curl --silent --max-time 60 --location "$APACHE_URL" 
#tar -xzf httpd/httpd-2.4.23.tar.gz
#cd httpd/httpd-2.4.23.tar.gz
#./configure --prefix=/app/apache --with-mod-auth-openid 
#make
#make clean install

cp $LP_DIR/apache.tar.gz .
tar -xzf apache.tar.gz

#PHP_URL="https://heroku-buildpack-php.s3.amazonaws.com/php-$PHP_VERSION""$heroku_rev"".tar.gz"
cp $LP_DIR/php.tar.gz .
tar -xzf php.tar.gz
echo "-----> Moving libphp5 ..."
echo $PHP_PATH
mv $PHP_PATH/.libs/libphp5.so $APACHE_PATH/modules

# update config files
mkdir php
mkdir php/lib
echo "-----> Updating files ... apache/conf"
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
echo "-----> Updating files ... php"
cp $LP_DIR/conf/php.ini php
echo "-----> Updating files ... php/lib"
cp $LP_DIR/conf/php.ini php/lib

# Restore old artifacts from the cache.
CACHED_DIRS="ibmdb2"
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir/* . &> /dev/null || true
done

  echo "-------> downloading and installing ibm_db2"
  download_and_install_ibm_db
  echo "-------> caching ibm_db2 and dependencies"
  for dir in $CACHED_DIRS; do
    mkdir -p $CACHE_DIR/$dir
	echo "----> copying php/lib files" 
    cp -R clidriver $CACHE_DIR/$dir &> /dev/null || true
    cp php/lib/php/extensions/no-debug-non-zts-20121212/ibm_db2.so $CACHE_DIR/$dir &> /dev/null || true
	cp php/lib/php/extensions/no-debug-non-zts-20121212/oauth.so $CACHE_DIR/$dir &> /dev/null || true
	cp php/lib/php/extensions/no-debug-non-zts-20121212/curl.so $CACHE_DIR/$dir &> /dev/null || true
    echo "-------> caching ibm_db2 done"
  done


# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

cat >>boot.sh <<EOF
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/lib/php:/app/clidriver/lib
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
#rm -rf $CACHE_DIR
